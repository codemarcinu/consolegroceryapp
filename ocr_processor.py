import easyocr
import cv2
import numpy as np
import os
import shutil
import json
import glob
from datetime import datetime
from typing import Optional, List, Tuple
from config import KONFIGURACJA
from llm_integration import parsuj_paragon_ai
from storage_manager import StorageManager
import tempfile
from pdf2image import convert_from_path

class ParagonProcessor:
    """
    Klasa do przetwarzania obraz√≥w paragon√≥w z pe≈ÇnƒÖ funkcjonalno≈õciƒÖ OCR + AI.
    """
    
    def __init__(self):
        """
        Inicjalizuje procesor paragon√≥w.
        """
        # Inicjalizacja EasyOCR z jƒôzykiem polskim i angielskim
        self.reader = easyocr.Reader(['pl', 'en'], 
                                   gpu=KONFIGURACJA["ocr"]["gpu"])
        
        # Foldery do przechowywania paragon√≥w
        self.folder_nowe = KONFIGURACJA["paths"]["paragony_nowe"]
        self.folder_przetworzone = KONFIGURACJA["paths"]["paragony_przetworzone"]
        self.folder_bledy = KONFIGURACJA["paths"]["paragony_bledy"]
        
        # Mened≈ºer przechowywania danych
        self.storage_manager = StorageManager()
        
        # Tworzenie folder√≥w, je≈õli nie istniejƒÖ
        for folder in [self.folder_nowe, self.folder_przetworzone, self.folder_bledy]:
            os.makedirs(folder, exist_ok=True)
    
    def przygotuj_obraz(self, sciezka_pliku: str) -> Optional[np.ndarray]:
        """
        Przygotowuje obraz paragonu do OCR.
        
        Args:
            sciezka_pliku: ≈öcie≈ºka do pliku obrazu
            
        Returns:
            Optional[np.ndarray]: Przygotowany obraz lub None w przypadku b≈Çƒôdu
        """
        try:
            img = cv2.imread(sciezka_pliku)
            if img is None:
                print(f"‚ùå Nie mo≈ºna wczytaƒá obrazu: {sciezka_pliku}")
                return None
            
            # Konwersja do skali szaro≈õci
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # Poprawa kontrastu (CLAHE)
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
            enhanced_contrast = clahe.apply(gray)
            
            # Rozmazanie gaussowskie + wyostrzenie
            blurred = cv2.GaussianBlur(enhanced_contrast, (0,0), 1.0)
            sharpened = cv2.addWeighted(enhanced_contrast, 1.5, blurred, -0.5, 0)
            
            # Binaryzacja Otsu
            _, binary_img = cv2.threshold(sharpened, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            
            return binary_img
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas przygotowywania obrazu '{sciezka_pliku}': {e}")
            return None
    
    def rozpoznaj_tekst(self, sciezka_pliku: str) -> Optional[str]:
        """
        Rozpoznaje tekst z obrazu paragonu.
        
        Args:
            sciezka_pliku: ≈öcie≈ºka do pliku obrazu
            
        Returns:
            Optional[str]: Rozpoznany tekst lub None w przypadku b≈Çƒôdu
        """
        try:
            przygotowany_obraz = self.przygotuj_obraz(sciezka_pliku)
            if przygotowany_obraz is None:
                return None
            
            # OCR z EasyOCR
            results = self.reader.readtext(przygotowany_obraz)
            
            if not results:
                print(f"‚ö†Ô∏è EasyOCR nie znalaz≈Ç tekstu w: {sciezka_pliku}")
                return None
            
            # WyciƒÖgnij tekst z wynik√≥w
            tekst_lines = []
            for (bbox, text, confidence) in results:
                if confidence > 0.3:  # Tylko tekst z dobrƒÖ pewno≈õciƒÖ
                    tekst_lines.append(text.strip())
            
            return '\n'.join(tekst_lines)
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd OCR dla pliku '{sciezka_pliku}': {e}")
            return None
    
    def przetworz_paragon(self, sciezka_pliku: str) -> bool:
        """
        Przetwarza pojedynczy paragon: OCR + AI parsing + zapis JSON.
        
        Args:
            sciezka_pliku: ≈öcie≈ºka do pliku obrazu
            
        Returns:
            bool: True je≈õli przetwarzanie siƒô powiod≈Ço, False w przeciwnym razie
        """
        nazwa_pliku = os.path.basename(sciezka_pliku)
        print(f"\nüîç Przetwarzam: {nazwa_pliku}")
        
        try:
            # 1. Rozpoznaj tekst (OCR)
            tekst = self.rozpoznaj_tekst(sciezka_pliku)
            if not tekst:
                print("‚ùå Nie uda≈Ço siƒô rozpoznaƒá tekstu")
                self._przenies_do_folderu(sciezka_pliku, self.folder_bledy)
                return False
            
            print("‚úÖ Tekst rozpoznany, parsowanie przez AI...")
            
            # 2. Parsuj produkty przez AI
            produkty = parsuj_paragon_ai(tekst, KONFIGURACJA["llm"])
            
            if not produkty:
                print("‚ùå AI nie znalaz≈Ço produkt√≥w")
                self._przenies_do_folderu(sciezka_pliku, self.folder_bledy)
                return False
            
            print(f"üõí AI znalaz≈Ço {len(produkty)} produkt√≥w:")
            for p in produkty:
                print(f"   ‚Ä¢ {p['nazwa']} - {p['cena']:.2f} z≈Ç")
            
            # 3. Zapisz produkty do JSON dla dalszego przetwarzania
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            paragon_data = {
                'plik_zrodlowy': nazwa_pliku,
                'data_przetworzenia': timestamp,
                'tekst_ocr': tekst,
                'produkty': produkty
            }
            
            # Zapisz do folderu data/
            json_filename = f"paragon_{timestamp}.json"
            json_path = os.path.join(KONFIGURACJA["paths"]["dane_json_folder"], json_filename)
            
            if self.storage_manager.zapisz_przetworzony_paragon(paragon_data):
                print(f"‚úÖ Paragon przetworzony i zapisany jako {json_filename}")
                
                # 4. Przenie≈õ obraz do folderu przetworzonych
                self._przenies_do_folderu(sciezka_pliku, self.folder_przetworzone)
                return True
            else:
                print("‚ùå B≈ÇƒÖd podczas zapisywania danych paragonu")
                self._przenies_do_folderu(sciezka_pliku, self.folder_bledy)
                return False
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas przetwarzania paragonu '{nazwa_pliku}': {e}")
            self._przenies_do_folderu(sciezka_pliku, self.folder_bledy)
            return False
    
    def przetworz_wszystkie_paragony(self) -> Tuple[int, int]:
        """
        Przetwarza wszystkie paragony z folderu nowych.
        
        Returns:
            Tuple[int, int]: Liczba przetworzonych paragon√≥w i liczba b≈Çƒôd√≥w
        """
        # Znajd≈∫ wszystkie pliki obraz√≥w oraz PDF
        extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff', '*.pdf', '*.PDF']
        pliki_do_przetworzenia = []
        for ext in extensions:
            pliki_do_przetworzenia.extend(glob.glob(os.path.join(self.folder_nowe, ext)))
        if not pliki_do_przetworzenia:
            print("üìÅ Brak nowych paragon√≥w do przetworzenia")
            return 0, 0
        print(f"üì∏ Znaleziono {len(pliki_do_przetworzenia)} paragon√≥w do przetworzenia")
        przetworzono = 0
        bledy = 0
        for sciezka_pliku in pliki_do_przetworzenia:
            if sciezka_pliku.lower().endswith('.pdf'):
                # Konwertuj ka≈ºdƒÖ stronƒô PDF na obraz i przetwarzaj
                try:
                    obrazy = convert_from_path(sciezka_pliku, dpi=300)
                    for idx, obraz in enumerate(obrazy):
                        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp_img:
                            obraz.save(tmp_img.name, 'JPEG')
                            wynik = self.przetworz_paragon(tmp_img.name)
                            if wynik:
                                przetworzono += 1
                            else:
                                bledy += 1
                            os.unlink(tmp_img.name)
                    # Po przetworzeniu przenie≈õ PDF do przetworzonych lub b≈Çƒôd√≥w (je≈õli choƒá jedna strona siƒô uda≈Ça)
                    if przetworzono > 0:
                        self._przenies_do_folderu(sciezka_pliku, self.folder_przetworzone)
                    else:
                        self._przenies_do_folderu(sciezka_pliku, self.folder_bledy)
                except Exception as e:
                    print(f"‚ùå B≈ÇƒÖd podczas konwersji PDF '{sciezka_pliku}': {e}")
                    self._przenies_do_folderu(sciezka_pliku, self.folder_bledy)
                    bledy += 1
            else:
                if self.przetworz_paragon(sciezka_pliku):
                    przetworzono += 1
                else:
                    bledy += 1
        print(f"\nüìä PODSUMOWANIE:")
        print(f"‚úÖ Przetworzono: {przetworzono}")
        print(f"‚ùå B≈Çƒôdy: {bledy}")
        if przetworzono > 0:
            print(f"\nüîÑ U≈ºyj opcji 'Importuj przetworzone paragony' aby dodaƒá produkty do spi≈ºarni")
        return przetworzono, bledy
    
    def _przenies_do_folderu(self, sciezka_pliku: str, folder_docelowy: str) -> None:
        """
        Przenosi plik do wskazanego folderu.
        
        Args:
            sciezka_pliku: ≈öcie≈ºka do pliku
            folder_docelowy: Folder docelowy
        """
        try:
            nazwa_pliku = os.path.basename(sciezka_pliku)
            sciezka_docelowa = os.path.join(folder_docelowy, nazwa_pliku)
            shutil.move(sciezka_pliku, sciezka_docelowa)
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas przenoszenia pliku '{sciezka_pliku}': {e}") 