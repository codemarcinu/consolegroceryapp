from typing import List, Dict, Any
from datetime import datetime, timedelta
import os
import glob
import json
import shutil
import cv2
import numpy as np
from pdf2image import convert_from_path

from models import Produkt
from config import KONFIGURACJA
from storage_manager import StorageManager
from product_management import ProductManager
from ocr_processor import ParagonProcessor
from llm_integration import OllamaClient
from ui_display import UIDisplay

class AsystentZakupow:
    """
    G≈Ç√≥wna klasa aplikacji zarzƒÖdzajƒÖca wszystkimi komponentami.
    """
    
    def __init__(self):
        """
        Inicjalizuje g≈Ç√≥wne komponenty aplikacji.
        """
        self.storage_manager = StorageManager()
        self.product_manager = ProductManager(self.storage_manager)
        self.paragon_processor = ParagonProcessor()
        self.llm_client = OllamaClient()
        self.ui = UIDisplay()
    
    def uruchom(self) -> None:
        """
        Uruchamia g≈Ç√≥wnƒÖ pƒôtlƒô aplikacji.
        """
        # Sprawd≈∫ produkty wygasajƒÖce przy starcie
        self._sprawdz_wygasajace_produkty()
        
        while True:
            self.ui.wyswietl_menu()
            wybor = self.ui.pobierz_wybor_menu()
            
            if wybor == "1":
                self._dodaj_szybki_produkt()
            elif wybor == "2":
                self._przetworz_paragony()
            elif wybor == "3":
                self._importuj_paragony()
            elif wybor == "4":
                self._przegladaj_spizarnie()
            elif wybor == "5":
                self._zarzadzaj_produktami()
            elif wybor == "6":
                self._sugeruj_przepisy()
            elif wybor == "7":
                self._pokaz_statystyki()
            elif wybor == "8":
                self.ui.wyswietl_komunikat("üöß Funkcja w trakcie rozwoju!", "ostrzezenie")
            elif wybor == "9":
                self.ui.wyswietl_komunikat("üëã Do widzenia!", "sukces")
                break
    
    def _sprawdz_wygasajace_produkty(self) -> None:
        """
        Sprawdza produkty wygasajƒÖce dzisiaj i jutro przy starcie aplikacji.
        """
        produkty = self.storage_manager.wczytaj_produkty()
        niezuzyty = [p for p in produkty if not p.zuzyty]
        
        dzisiaj = datetime.now().date()
        jutro = dzisiaj + timedelta(days=1)
        
        wygasaja_dzisiaj = []
        wygasaja_jutro = []
        
        for produkt in niezuzyty:
            data_produktu = produkt.data_waznosci.date()
            if data_produktu <= dzisiaj:
                wygasaja_dzisiaj.append(produkt)
            elif data_produktu == jutro:
                wygasaja_jutro.append(produkt)
        
        if wygasaja_dzisiaj or wygasaja_jutro:
            print("\n" + "=" * 50)
            print("‚ö†Ô∏è  PRODUKTY WYMAGAJƒÑCE UWAGI!")
            print("=" * 50)
            
            if wygasaja_dzisiaj:
                print("\nüî¥ WYGASAJƒÑ DZISIAJ:")
                for p in wygasaja_dzisiaj:
                    print(f"   ‚Ä¢ {p.nazwa} ({p.kategoria})")
            
            if wygasaja_jutro:
                print("\nüü° WYGASAJƒÑ JUTRO:")
                for p in wygasaja_jutro:
                    print(f"   ‚Ä¢ {p.nazwa} ({p.kategoria})")
            
            print("=" * 50)
    
    def _dodaj_szybki_produkt(self) -> None:
        """
        Obs≈Çuguje dodawanie pojedynczego produktu.
        """
        if self.product_manager.dodaj_szybki_produkt(KONFIGURACJA["llm"]):
            self.ui.wyswietl_komunikat("‚úÖ Produkt dodany pomy≈õlnie!", "sukces")
        else:
            self.ui.wyswietl_komunikat("‚ùå Nie uda≈Ço siƒô dodaƒá produktu!", "blad")
    
    def _przetworz_paragony(self) -> None:
        """
        Obs≈Çuguje przetwarzanie paragon√≥w z obraz√≥w.
        """
        print("\nüîÑ Rozpoczynam przetwarzanie paragon√≥w...")
        
        # Znajd≈∫ wszystkie pliki obraz√≥w w folderze paragony/nowe
        pliki = []
        for rozszerzenie in ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.pdf']:
            pliki.extend(glob.glob(f"paragony/nowe/*{rozszerzenie}"))
        
        if not pliki:
            print("‚ùå Nie znaleziono ≈ºadnych paragon√≥w do przetworzenia!")
            return
        
        print(f"üì∏ Znaleziono {len(pliki)} paragon√≥w do przetworzenia\n")
        
        przetworzone = 0
        bledy = 0
        
        for i, plik in enumerate(pliki, 1):
            print(f"\nüîç Przetwarzam: {os.path.basename(plik)} ({i}/{len(pliki)})")
            
            try:
                # Konwertuj PDF do obrazu je≈õli to PDF
                if plik.lower().endswith('.pdf'):
                    print("üìÑ Konwertujƒô PDF do obrazu...")
                    try:
                        # Konwertuj PDF do obrazu
                        obrazy = convert_from_path(plik)
                        if not obrazy:
                            print(f"‚ùå Nie uda≈Ço siƒô przekonwertowaƒá PDF '{plik}'")
                            bledy += 1
                            continue
                        
                        # Zapisz pierwszy obraz tymczasowo
                        temp_image = "temp_image.png"
                        obrazy[0].save(temp_image, "PNG")
                        
                        # Wczytaj obraz przez OpenCV
                        obraz = cv2.imread(temp_image)
                        
                        # Usu≈Ñ tymczasowy plik
                        os.remove(temp_image)
                        
                        if obraz is None:
                            print(f"‚ùå Nie uda≈Ço siƒô wczytaƒá przekonwertowanego obrazu")
                            bledy += 1
                            continue
                        
                    except Exception as e:
                        print(f"‚ùå B≈ÇƒÖd podczas konwersji PDF '{plik}': {str(e)}")
                        bledy += 1
                        continue
                else:
                    obraz = cv2.imread(plik)
                    if obraz is None:
                        print(f"‚ùå Nie uda≈Ço siƒô odczytaƒá obrazu '{plik}'")
                        bledy += 1
                        continue
                
                # Rozpoznaj tekst
                print("üîç Rozpoznajƒô tekst...")
                tekst = self.paragon_processor.rozpoznaj_tekst(obraz)
                if not tekst:
                    print("‚ùå Nie uda≈Ço siƒô rozpoznaƒá tekstu!")
                    bledy += 1
                    continue
                
                print("‚úÖ Tekst rozpoznany, parsowanie przez AI...")
                # Parsuj tekst przez AI
                produkty = self.paragon_processor.parsuj_paragon_ai(tekst, KONFIGURACJA["llm"])
                if not produkty:
                    print("‚ùå AI nie znalaz≈Ço produkt√≥w")
                    bledy += 1
                    continue
                
                # Zapisz przetworzone produkty
                nazwa_pliku = os.path.splitext(os.path.basename(plik))[0]
                sciezka_wyjsciowa = f"paragony/przetworzone/{nazwa_pliku}.json"
                
                # Upewnij siƒô, ≈ºe folder istnieje
                os.makedirs("paragony/przetworzone", exist_ok=True)
                
                with open(sciezka_wyjsciowa, 'w', encoding='utf-8') as f:
                    json.dump(produkty, f, ensure_ascii=False, indent=2)
                
                print(f"‚úÖ Zapisano {len(produkty)} produkt√≥w do {sciezka_wyjsciowa}")
                przetworzone += 1
                
                # Przenie≈õ przetworzony plik do archiwum
                archiwum = f"paragony/archiwum/{os.path.basename(plik)}"
                os.makedirs("paragony/archiwum", exist_ok=True)
                shutil.move(plik, archiwum)
                print(f"üì¶ Przeniesiono do archiwum: {archiwum}")
                
            except Exception as e:
                print(f"‚ùå B≈ÇƒÖd podczas przetwarzania '{plik}': {str(e)}")
                bledy += 1
                continue
        
        print("\nüìä PODSUMOWANIE:")
        print(f"‚úÖ Przetworzono: {przetworzone}")
        print(f"‚ùå B≈Çƒôdy: {bledy}")
        
        if bledy > 0:
            print(f"\n‚ö†Ô∏è ‚ö†Ô∏è WystƒÖpi≈Ço {bledy} b≈Çƒôd√≥w podczas przetwarzania!")
    
    def _importuj_paragony(self) -> None:
        """
        Obs≈Çuguje import przetworzonych paragon√≥w do spi≈ºarni.
        """
        if self.product_manager.importuj_przetworzone_paragony(KONFIGURACJA["llm"]):
            self.ui.wyswietl_komunikat("‚úÖ Paragony zaimportowane pomy≈õlnie!", "sukces")
        else:
            self.ui.wyswietl_komunikat("‚ùå Nie uda≈Ço siƒô zaimportowaƒá paragon√≥w!", "blad")
    
    def _przegladaj_spizarnie(self) -> None:
        """
        Obs≈Çuguje przeglƒÖdanie zawarto≈õci spi≈ºarni.
        """
        produkty = self.storage_manager.wczytaj_produkty()
        produkty_aktywne = [p for p in produkty if not p.zuzyty]
        
        if produkty_aktywne:
            # Sortuj wed≈Çug daty wa≈ºno≈õci
            produkty_aktywne.sort(key=lambda x: x.data_waznosci)
            self.ui.wyswietl_produkty(produkty_aktywne)
        else:
            self.ui.wyswietl_komunikat("üì¶ Spi≈ºarnia jest pusta!", "info")
    
    def _zarzadzaj_produktami(self) -> None:
        """
        Obs≈Çuguje zarzƒÖdzanie produktami (oznaczanie jako zu≈ºyte/usuwanie).
        """
        if self.product_manager.szybkie_zarzadzanie_produktami():
            self.ui.wyswietl_komunikat("‚úÖ Operacja wykonana pomy≈õlnie!", "sukces")
        # Nie wy≈õwietlamy b≈Çƒôdu je≈õli u≈ºytkownik anulowa≈Ç operacjƒô
    
    def _sugeruj_przepisy(self) -> None:
        """
        Obs≈Çuguje generowanie sugestii przepis√≥w na podstawie dostƒôpnych produkt√≥w.
        """
        if not KONFIGURACJA["llm"]["enabled"]:
            self.ui.wyswietl_komunikat("‚ö†Ô∏è LLM jest wy≈ÇƒÖczone. W≈ÇƒÖcz go w konfiguracji aby u≈ºywaƒá sugestii przepis√≥w.", "ostrzezenie")
            return
        
        produkty = self.storage_manager.wczytaj_produkty()
        produkty_aktywne = [p for p in produkty if not p.zuzyty]
        
        if not produkty_aktywne:
            self.ui.wyswietl_komunikat("‚ùå Brak produkt√≥w do sugestii przepis√≥w!", "ostrzezenie")
            return
        
        # Produkty bliskie terminu (priorytet)
        bliskie_terminu = [p for p in produkty_aktywne 
                          if (p.data_waznosci - datetime.now()).days <= 3]
        
        # Wybierz max 8 produkt√≥w dla lepszej wydajno≈õci LLM
        skladniki = [p.nazwa for p in produkty_aktywne[:8]]
        priorytetowe = [p.nazwa for p in bliskie_terminu[:4]]
        
        print("\nüç≥ Generujƒô sugestie przepis√≥w...")
        print("ü§ñ AI analizuje dostƒôpne sk≈Çadniki...")
        
        # Przygotuj prompt dla LLM
        prompt = f"""Na podstawie poni≈ºszych dostƒôpnych sk≈Çadnik√≥w, zaproponuj 3 proste i smaczne przepisy:

DOSTƒòPNE SK≈ÅADNIKI:
{', '.join(skladniki)}

SK≈ÅADNIKI PRIORYTETOWE (ko≈ÑczƒÖ siƒô za 3 dni lub wcze≈õniej):
{', '.join(priorytetowe) if priorytetowe else 'Brak'}

WYMAGANIA:
- Przepisy majƒÖ byƒá proste do wykonania
- Czas przygotowania maksymalnie 30 minut
- U≈ºyj jak najwiƒôcej dostƒôpnych sk≈Çadnik√≥w
- Priorytetowo u≈ºyj sk≈Çadniki ko≈ÑczƒÖce siƒô termin√≥w
- Ka≈ºdy przepis powinien zawieraƒá: nazwƒô, sk≈Çadniki, spos√≥b przygotowania

FORMAT ODPOWIEDZI:
1. [NAZWA PRZEPISU]
Sk≈Çadniki: [lista sk≈Çadnik√≥w]
Przygotowanie: [kr√≥tki opis spos√≥b przygotowania]

2. [NAZWA PRZEPISU]
Sk≈Çadniki: [lista sk≈Çadnik√≥w]  
Przygotowanie: [kr√≥tki opis spos√≥b przygotowania]

3. [NAZWA PRZEPISU]
Sk≈Çadniki: [lista sk≈Çadnik√≥w]
Przygotowanie: [kr√≥tki opis spos√≥b przygotowania]"""
        
        system_prompt = """Jeste≈õ do≈õwiadczonym kucharzem specjalizujƒÖcym siƒô w prostych, smacznych przepisach z dostƒôpnych sk≈Çadnik√≥w. 
Koncentrujesz siƒô na wykorzystaniu sk≈Çadnik√≥w, kt√≥re mogƒÖ siƒô zepsuƒá oraz tworzeniu praktycznych, ≈Çatwych do wykonania posi≈Çk√≥w."""
        
        # Pobierz sugestie od LLM
        try:
            odpowiedz = self.llm_client.zapytaj_llm(
                prompt, 
                system_prompt,
                max_tokens=800,
                temperatura=0.7
            )
            
            if odpowiedz and not odpowiedz.startswith("B≈ÇƒÖd"):
                print("\n" + "=" * 60)
                print("üç≥ SUGESTIE PRZEPIS√ìW NA PODSTAWIE TWOJEJ SPI≈ªARNI")
                print("=" * 60)
                print(odpowiedz)
                print("=" * 60)
                
                # Opcja zapisu do pliku
                zapisz = input("\nüíæ Zapisaƒá przepisy do pliku? (t/n): ")
                if zapisz.lower() == 't':
                    try:
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        nazwa_pliku = f"przepisy_{timestamp}.txt"
                        with open(nazwa_pliku, 'w', encoding='utf-8') as f:
                            f.write("SUGESTIE PRZEPIS√ìW - ASYSTENT SPI≈ªARNI\n")
                            f.write("=" * 50 + "\n")
                            f.write(f"Data: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n")
                            f.write(f"Dostƒôpne sk≈Çadniki: {', '.join(skladniki)}\n")
                            if priorytetowe:
                                f.write(f"Sk≈Çadniki priorytetowe: {', '.join(priorytetowe)}\n")
                            f.write("\n" + odpowiedz)
                        self.ui.wyswietl_komunikat(f"‚úÖ Przepisy zapisane do pliku: {nazwa_pliku}", "sukces")
                    except Exception as e:
                        self.ui.wyswietl_komunikat(f"‚ùå B≈ÇƒÖd podczas zapisywania: {e}", "blad")
            else:
                self.ui.wyswietl_komunikat(f"‚ùå B≈ÇƒÖd podczas generowania przepis√≥w: {odpowiedz}", "blad")
                
        except Exception as e:
            self.ui.wyswietl_komunikat(f"‚ùå B≈ÇƒÖd podczas generowania przepis√≥w: {e}", "blad")
    
    def _pokaz_statystyki(self) -> None:
        """
        Wy≈õwietla statystyki spi≈ºarni.
        """
        produkty = self.storage_manager.wczytaj_produkty()
        produkty_aktywne = [p for p in produkty if not p.zuzyty]
        
        if not produkty_aktywne:
            self.ui.wyswietl_komunikat("üì¶ Spi≈ºarnia jest pusta!", "info")
            return
        
        # Statystyki podstawowe
        liczba_produktow = len(produkty_aktywne)
        wartosc_calkowita = sum(p.cena for p in produkty_aktywne if p.cena)
        
        # Statystyki kategorii
        kategorie = {}
        for p in produkty_aktywne:
            kategorie[p.kategoria] = kategorie.get(p.kategoria, 0) + 1
        
        # Produkty wygasajƒÖce
        dzisiaj = datetime.now().date()
        wygasaja_wkrotce = [p for p in produkty_aktywne 
                           if (p.data_waznosci.date() - dzisiaj).days <= 3]
        
        print("\n" + "=" * 50)
        print("üìä STATYSTYKI SPI≈ªARNI")
        print("=" * 50)
        
        print(f"\nüì¶ Liczba produkt√≥w: {liczba_produktow}")
        if wartosc_calkowita > 0:
            print(f"üí∞ Warto≈õƒá ca≈Çkowita: {wartosc_calkowita:.2f} z≈Ç")
        
        print("\nüìë Produkty wed≈Çug kategorii:")
        for kat, liczba in sorted(kategorie.items()):
            print(f"   ‚Ä¢ {kat}: {liczba}")
        
        if wygasaja_wkrotce:
            print("\n‚ö†Ô∏è Produkty wygasajƒÖce w ciƒÖgu 3 dni:")
            for p in wygasaja_wkrotce:
                dni_do_wygasniecia = (p.data_waznosci.date() - dzisiaj).days
                print(f"   ‚Ä¢ {p.nazwa} ({p.kategoria}) - {dni_do_wygasniecia} dni")
        
        print("=" * 50)

if __name__ == "__main__":
    # Upewnij siƒô, ≈ºe wszystkie wymagane katalogi istniejƒÖ
    for sciezka in [
        KONFIGURACJA["paths"]["paragony_nowe"],
        KONFIGURACJA["paths"]["paragony_przetworzone"],
        KONFIGURACJA["paths"]["paragony_bledy"],
        KONFIGURACJA["paths"]["dane_json_folder"],
        KONFIGURACJA["paths"]["archiwum_json"]
    ]:
        os.makedirs(sciezka, exist_ok=True)
    
    # Uruchom aplikacjƒô
    app = AsystentZakupow()
    app.uruchom() 